// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RootfsServerClient is the client API for RootfsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootfsServerClient interface {
	Commands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandsResponse, error)
	Resource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (RootfsServer_ResourceClient, error)
	StdErr(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*Empty, error)
	StdOut(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*Empty, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Empty, error)
	Success(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type rootfsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRootfsServerClient(cc grpc.ClientConnInterface) RootfsServerClient {
	return &rootfsServerClient{cc}
}

func (c *rootfsServerClient) Commands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandsResponse, error) {
	out := new(CommandsResponse)
	err := c.cc.Invoke(ctx, "/proto.RootfsServer/Commands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootfsServerClient) Resource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (RootfsServer_ResourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &RootfsServer_ServiceDesc.Streams[0], "/proto.RootfsServer/Resource", opts...)
	if err != nil {
		return nil, err
	}
	x := &rootfsServerResourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RootfsServer_ResourceClient interface {
	Recv() (*ResourceChunk, error)
	grpc.ClientStream
}

type rootfsServerResourceClient struct {
	grpc.ClientStream
}

func (x *rootfsServerResourceClient) Recv() (*ResourceChunk, error) {
	m := new(ResourceChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rootfsServerClient) StdErr(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.RootfsServer/StdErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootfsServerClient) StdOut(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.RootfsServer/StdOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootfsServerClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.RootfsServer/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootfsServerClient) Success(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.RootfsServer/Success", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootfsServerServer is the server API for RootfsServer service.
// All implementations should embed UnimplementedRootfsServerServer
// for forward compatibility
type RootfsServerServer interface {
	Commands(context.Context, *Empty) (*CommandsResponse, error)
	Resource(*ResourceRequest, RootfsServer_ResourceServer) error
	StdErr(context.Context, *LogMessage) (*Empty, error)
	StdOut(context.Context, *LogMessage) (*Empty, error)
	Abort(context.Context, *AbortRequest) (*Empty, error)
	Success(context.Context, *Empty) (*Empty, error)
}

// UnimplementedRootfsServerServer should be embedded to have forward compatible implementations.
type UnimplementedRootfsServerServer struct {
}

func (UnimplementedRootfsServerServer) Commands(context.Context, *Empty) (*CommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commands not implemented")
}
func (UnimplementedRootfsServerServer) Resource(*ResourceRequest, RootfsServer_ResourceServer) error {
	return status.Errorf(codes.Unimplemented, "method Resource not implemented")
}
func (UnimplementedRootfsServerServer) StdErr(context.Context, *LogMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StdErr not implemented")
}
func (UnimplementedRootfsServerServer) StdOut(context.Context, *LogMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StdOut not implemented")
}
func (UnimplementedRootfsServerServer) Abort(context.Context, *AbortRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedRootfsServerServer) Success(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Success not implemented")
}

// UnsafeRootfsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootfsServerServer will
// result in compilation errors.
type UnsafeRootfsServerServer interface {
	mustEmbedUnimplementedRootfsServerServer()
}

func RegisterRootfsServerServer(s grpc.ServiceRegistrar, srv RootfsServerServer) {
	s.RegisterService(&RootfsServer_ServiceDesc, srv)
}

func _RootfsServer_Commands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServerServer).Commands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RootfsServer/Commands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServerServer).Commands(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootfsServer_Resource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RootfsServerServer).Resource(m, &rootfsServerResourceServer{stream})
}

type RootfsServer_ResourceServer interface {
	Send(*ResourceChunk) error
	grpc.ServerStream
}

type rootfsServerResourceServer struct {
	grpc.ServerStream
}

func (x *rootfsServerResourceServer) Send(m *ResourceChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _RootfsServer_StdErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServerServer).StdErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RootfsServer/StdErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServerServer).StdErr(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootfsServer_StdOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServerServer).StdOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RootfsServer/StdOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServerServer).StdOut(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootfsServer_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServerServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RootfsServer/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServerServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootfsServer_Success_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServerServer).Success(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RootfsServer/Success",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServerServer).Success(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RootfsServer_ServiceDesc is the grpc.ServiceDesc for RootfsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootfsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RootfsServer",
	HandlerType: (*RootfsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commands",
			Handler:    _RootfsServer_Commands_Handler,
		},
		{
			MethodName: "StdErr",
			Handler:    _RootfsServer_StdErr_Handler,
		},
		{
			MethodName: "StdOut",
			Handler:    _RootfsServer_StdOut_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _RootfsServer_Abort_Handler,
		},
		{
			MethodName: "Success",
			Handler:    _RootfsServer_Success_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Resource",
			Handler:       _RootfsServer_Resource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rootfs_server.proto",
}
